<style>
  page {
    background-color: #fff;
  }
</style>

<template>
  <view class="content">
    <form bindsubmit="formSubmit">

      <view wx:for="{{form}}" wx:key="{{form.id}}">

        <text wx:if="{{item.type == 'title' }}">{{item.label}}</text>
        <text wx:elif="{{item.type == 'subtitle' }}">{{item.label}}</text>
        <text wx:elif="{{item.type == 'label' }}">{{item.label}}</text>
        <i-input wx:elif="{{item.type == 'text'}}" type="text" placeholder="{{item.placeholder}}" name="{{item.variable}}"
                 value="{{item.data.value}}" title="{{item.label}}"></i-input>
        <i-input wx:elif="{{item.type == 'textarea'}}" type="textarea" placeholder="{{item.placeholder}}" name="{{item.variable}}"
                 value="{{item.data.value}}" title="{{item.label}}"></i-input>
        <i-input wx:elif="{{item.type == 'suggest'}}" type="text" placeholder="{{item.placeholder}}" name="{{item.variable}}"
                 value="{{item.data.value}}" title="{{item.label}}"></i-input>

        <view wx:elif="{{item.type == 'hidden'}}" style="border-top:1px solid #000000"></view>

        <!-- 链接 -->
        <view class="form-picker form-link" wx:elif="{{item.type == 'link'}}">
          <view>&#x3000;{{item.label}}：</view>
          <navigator url="out" class="link-text">{{item.value}}</navigator>
        </view>

        <!-- 图片 -->
        <view class="form-picker" wx:elif="{{item.type == 'image'}}">
          &#x3000;{{item.label}}：
          <image style="width: 6rem; height: 6rem" mode="aspectFit" src="{{item.src}}"></image>
        </view>

        <!-- 方框 -->
        <view class="form-panel" wx:elif="{{item.type == 'panel'}}"
              style="border:{{item.border}} solid rgb(204, 204, 204)">
          {{item.content}}
        </view>

        <!-- 选择器 -->
        <picker wx:elif="{{item.type == 'dropdown'}}" bindchange="bindPickerChange({{item}})" name="{{item.variable}}"
                value="{{item.data.value}}" range="{{item.options}}" range-key="label">
          <view class="form-picker">
            &#x3000;{{item.label}}：{{item.options[item.data.value].label}}
          </view>
        </picker>


        <!-- 多选框 -->
        <view wx:elif="{{item.type == 'checkgroup'}}" style="margin:0.5rem 0">
          &#x3000;<label class="form-title">{{item.label}}</label>
          <checkbox-group name="{{item.variable}}">
            <view wx:for="{{item.options}}" wx:for-item="itemGroup" wx:key="{{itemGroup.value}}"
                  style="padding:0.2rem 2rem">
              <checkbox value="{{itemGroup.value}}" checked="{{item.data.value[index]}}"/>
              {{itemGroup.label}}
            </view>
          </checkbox-group>
        </view>

        <!-- 单选框 -->
        <view wx:elif="{{item.type == 'radio'}}" style="margin:0.5rem 0">
          &#x3000;<label class="form-title">{{item.label}}</label>
          <radio-group name="{{item.variable}}">
            <view wx:for-items="{{item.options}}" wx:for-item="itemGroup" wx:key="{{itemGroup.value}}"
                  style="padding:0.2rem 2rem">
              <radio value="{{itemGroup.value}}" checked="{{item.data.value == itemGroup.value}}">
                <text>{{itemGroup.label}}</text>
              </radio>
            </view>
          </radio-group>
        </view>

        <!-- 日期选择器 -->
        <picker wx:elif="{{item.type == 'datetime'}}" mode="date" start="{{item.minDate}}" end="{{item.maxDate}}"
                bindchange="bindDateChange" value="{{item.data.value}}" name="{{item.variable}}">
          <view class="form-picker">
            &#x3000;{{item.label}}：{{item.data.value}}
          </view>
        </picker>

        <button wx:elif="{{item.type == 'button' }}" class="i-btn i-btn-small i-btn-success i-btn-circle"
                style="background:#2d8cf0" type="success" size="small">
          {{item.label}}
        </button>

        <button wx:elif="{{item.type == 'submit' }}" formType="submit"
                class="i-btn i-btn-small i-btn-success i-btn-circle" type="success" size="small">
          {{item.label}}
        </button>

      </view>
    </form>
    <i-modal title="Assign Task" visible="{{ assignVisible }}" bind:ok="handleRoute" bind:cancel="handleClose">
      <view wx:if="{{assign.routeFinishFlag}}">End of process</view>
      <view>{{assign.users[0].userFullName}}</view>
    </i-modal>

    <i-modal visible="{{ visible2 }}" bind:ok="back" show-cancel="{{false}}">
      <view>route success</view>
    </i-modal>
  </view>


</template>

<script>
  import wepy from 'wepy';
  import api from '@/common/api';

  export default class Task extends wepy.page {
    config = {
      usingComponents: {
        'i-input': '../components/iview/input/index',
        'i-button': '../components/iview/button/index',
        "i-modal": "../components/iview/modal/index"

      }
    };

    components = {};
    props = {};
    data = {
      kase:{},
      form: [],
      assignVisible:false,
      visible2:false,
      assign:{}
    };
    methods = {
      async formSubmit(e) {
        let { caseId, delIndex: del_index,dyn_uid } = this.kase;
        let processId = this.kase.process.processId;
        let taskId = this.kase.task.taskId;
        console.log(e.detail.value)
        await api.updateForm({caseId,del_index,dyn_uid,data:e.detail.value});
        let { stepPosition: step_pos, stepId, formId } = this.detail;
        await api.fetchNextStep(caseId, { processId, taskId, stepId, step_pos, app_index:2 });
        let assign = await api.fetchAssignment({taskId,caseId, del_index });
        this.assign = assign[0];
        this.assignVisible = true;
        this.$apply()
      },

      async handleRoute(){
        await api.routeCase(this.kase.caseId);
        this.assignVisible = false;
        this.visible2 = true;
        this.$apply();
      },

      handleClose(){
        this.assignVisible = false
      },
      back(){
        wepy.navigateBack();
      }
    };
    events = {};

    /**
     * 获取表单
     * @param kase
     * @returns {Promise<void>}
     */
    async fetchForm(kase) {
      let { caseId, delIndex } = kase;

      let processId = kase.process.processId;
      let taskId = kase.task.taskId;
      let res = await api.fetchTaskDetail({ processId, taskId });

      let { stepPosition: step_pos, stepId, formId } = res[0];
      this.kase.dyn_uid = formId;
      this.detail = res[0]
      await api.fetchNextStep(caseId, { processId, taskId, stepId, step_pos, app_index:2 });
      let res1 = await api.fetchForm({ processId, formId, caseId, delIndex });

      //平铺表单
      let forms = res1.formContent.items[0].items;
      forms.forEach(formItems => {
        formItems.forEach(item => {
          if (item.id) this.form.push(item);
        });
      });
      this.$apply();
    }

    onLoad(options) {
      let kase = JSON.parse(options.kase);
      this.kase = kase;
      this.fetchForm(kase);

    }
  }
</script>
